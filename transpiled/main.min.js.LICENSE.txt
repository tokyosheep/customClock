/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* .default */

/* DndContext */

/* DndContext.Provider */

/* binding */

/* combineReducers */

/* createDndContext */

/* createStore */

/* eslint-disable import/no-unresolved */

/* eslint-disable no-unused-vars */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* globals self */

/* harmony default export */

/* harmony export */

/* harmony import */

/* harmony reexport (checked) */

/* invariant */

/* module decorator */

/* reexport */

/* reexport safe */

/* unused harmony exports __DO_NOT_USE__ActionTypes, applyMiddleware, compose */

/* webpack/runtime/compat get default export */

/*#__PURE__*/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create the React Context
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

/** @class */

/** @license React v0.20.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/************************************************************************/

/******/

/***/

/*break*/

/*endfinally*/

/*return*/

/*yield*/

//

//         channel.port2.postMessage(0);

//         setImmediate(callback);

//     channel.port1.onmessage = callback;

//     return function requestCall() {

//     var channel = new MessageChannel();

//     };

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

// "drop and blow away the whole document" action.

// - Android 4-4.3

// - Chrome 26-34

// - Firefox 14-29

// - Internet Explorer 11

// - Safari 6-7

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// @ts-ignore

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// Advance the index before calling the task. This ensures that we will

// Align at the center

// Allow injecting another batching function later

// An exception thrown by a task will permanently interrupt the processing of

// Any reducers that existed in both the new and old rootReducer

// Array-as-queue is good enough here, since we are just dealing with exceptions.

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid failures from read-only properties

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/esm/browser/index.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/esm/browser/raw.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/DragDropManagerImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/DragDropMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/HandlerRegistryImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/actions/registry.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/contracts.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/factories.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dragOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/dragOperation.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/refCount.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/reducers/stateId.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/coords.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/dirtiness.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/getNextUniqueId.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/esm/utils/matchesType.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/BrowserDetector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/HTML5BackendImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/nativeTypesConfig.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/OffsetUtils.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/DndContext.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/DndProvider.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/DropTargetMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/TargetConnector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/registration.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/internal/drop.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/internal/useCollector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/hooks/useDrop.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/utils/cloneWithRef.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/esm/utils/isRef.js

// CONCATENATED MODULE: ../../node_modules/react-icons/io/index.esm.js

// CONCATENATED MODULE: ../../node_modules/react-icons/lib/esm/index.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/hooks/useDispatch.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/hooks/useSelector.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/utils/reactBatchedUpdates.js

// CONCATENATED MODULE: ../../node_modules/react-redux/es/utils/verifyPlainObject.js

// CONCATENATED MODULE: ../../node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: ../../node_modules/symbol-observable/es/ponyfill.js

// CONCATENATED MODULE: ./components/clockCompo/clockMain.tsx

// CONCATENATED MODULE: ./components/clockCompo/type1/clockCompotype1.tsx

// CONCATENATED MODULE: ./components/clockCompo/type2/clockCompoType2.tsx

// CONCATENATED MODULE: ./components/footer.tsx

// CONCATENATED MODULE: ./components/parts/button.tsx

// CONCATENATED MODULE: ./components/parts/loading.tsx

// CONCATENATED MODULE: ./components/parts/text.tsx

// CONCATENATED MODULE: ./components/settingsCompo/clockOptions.tsx

// CONCATENATED MODULE: ./components/settingsCompo/hoursList.tsx

// CONCATENATED MODULE: ./fileSystem/animation.ts

// CONCATENATED MODULE: ./fileSystem/clockEvent.ts

// CONCATENATED MODULE: ./fileSystem/clockMain.ts

// CONCATENATED MODULE: ./main.tsx

// CONCATENATED MODULE: ./pages/Clock.tsx

// CONCATENATED MODULE: ./pages/Cover.tsx

// CONCATENATED MODULE: ./pages/Layout.tsx

// CONCATENATED MODULE: ./pages/Settings.tsx

// CONCATENATED MODULE: ./pages/arrowBtn.tsx

// CONCATENATED MODULE: ./redux/actions/mapDispatchToPtops.ts

// CONCATENATED MODULE: external "electron"

// CONCATENATED MODULE: external "path"

// Check if module is in cache

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Create a new module (and put it into the cache)

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut out early if the target id has not been set. This should prevent errors

// DCE check should happen before ReactDOM bundle executes so that

// Default to a dummy "batch" implementation that just runs the callback

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Don't emit hover in `dragenter` on Firefox due to an edge case.

// Don't publish the source just yet (see why below)

// Don't show a nice cursor but still prevent default

// EXPORTS

// EXTERNAL MODULE: ../../node_modules/@react-dnd/invariant/dist/invariant.esm.js

// EXTERNAL MODULE: ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/esm/common/DndContext.js + 30 modules

// EXTERNAL MODULE: ../../node_modules/react-dom/index.js

// EXTERNAL MODULE: ../../node_modules/react-is/index.js

// EXTERNAL MODULE: ../../node_modules/react/index.js

// EXTERNAL MODULE: ../../node_modules/redux/es/redux.js

// Equivalent to push, but avoids a function call.

// Even if we were, there is another bug in Internet Explorer 10.

// Execute the module function

// Finally call hover on all matching targets.

// Firefox can dispatch this event in an infinite loop

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox won't drag without setting data

// Flag the module as loaded

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get the draggable source

// Get the source client offset

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, since this timer gets frequently dropped in Firefox

// IE doesn't support MIME types in setData

// IE requires this to fire dragover events

// If a task throws an exception, `flush` ensures that its state will remain

// If by this time no drag source reacted, tell browser not to drag.

// If child drag source refuses drag but parent agrees,

// If passed a ReactElement, clone it and attach this function as a ref.

// If the target changes position as the result of `dragenter`, Firefox

// If we call `asap` within tasks scheduled by `asap`, the queue will

// Important!

// In a web browser, exceptions are not fatal. However, to avoid

// In some cases the user may want to override this behavior, e.g.

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Inputs and textareas should be selectable

// Instead, we periodically shift 1024 tasks off the queue.

// Interpolate

// It also neatly avoids a situation where render() returns null

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Manually shift all values starting at the index back to the

// Multiple actions are dispatched here, which is why this doesn't return an action

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// NAMESPACE OBJECT: ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// Never forget.

// Once a flush has been requested, no further calls to `requestFlush` are

// Only IE requires us to explicitly say

// Only proceed if we have not handled it already.

// Prevent default "drop and blow away the whole document" action.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// RawTasks are recycled to reduce GC churn.

// React v16.11 and below

// React v16.12 and above

// Rearrange xs and ys so that xs is sorted

// Receiving a mouse event in the middle of a dragging operation

// Remove those targetIds that don't match the targetType.  This

// Return the exports of the module

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// See:

// Show user-specified drop effect.

// Store drag source node so we can check whether

// THIS FILE IS AUTO GENERATED

// TODO: if we ever make a react-native version of this,

// Test for A's keys different from B.

// The browsers will use the image intrinsic size under different conditions.

// The drop target may either be attached via ref or connect function

// The flush function processes all tasks that have been scheduled with

// The message channel technique was discovered by Malte Ubl and was the

// The module cache

// The require function

// The rightmost point in the dataset should give an exact result

// They are implemented in all modern browsers.

// This action has a similiar effect to ActionTypes.INIT.

// This helps us achieve a neat API where user doesn't even know that refs

// This hook exists purely for testing purposes.

// This is for `asap.js` only.

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is probably a native item type we don't understand.

// This is the reason such behavior is strictly opt-in.

// This is used to make sure we don't warn about the same

// This is useful to prevent an error thrown in a task from stalling the event

// UNUSED EXPORTS: useDrag, useDragDropManager, useDragLayer

// Use custom drag image if user specifies it.

// Use the fastest means possible to execute a task in its own turn, with

// Usually we want to publish it in the next tick so that browser

// Verify that the code above has been dead code eliminated (DCE'd).

// We dispatch a timeout with a specified delay of 0 for engines that

// We don't expect any of the above to throw, but better to be safe.

// We need to wait before we start listening for mousemove events.

// We queue errors to ensure they are thrown in right order (FIFO).

// We wrap tasks with recyclable task objects.  A task object implements

// We'll have to wait for @3x to see if this is entirely correct

// When a store is created, an "INIT" action is dispatched so that every

// When passed a node, call the hook straight away.

// When using a custom drag layer, the only way to prevent

// Whichever timer succeeds will cancel both timers and

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// `call`, just like a function.

// `process.on("uncaughtException")` or by a domain.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// an event 20 times per second until it succeeds.

// and height. In this case, though, returning null from render()

// and the components are attached to dnd-core

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// are being used under the hood.

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// between events.

// call `rawAsap.requestFlush` if an exception is thrown.

// can reliably accommodate that request. This will usually be snapped

// changed

// cheap lodash replacements

// closure.

// consistent and will resume where it left off when called again.

// define __esModule on exports

// define getter functions for harmony exports

// depends on its existence.

// don't hoist over string (html) components

// dragenter handler.

// either ensure that no exceptions are thrown from your task, or to manually

// empty

// eslint-disable-line no-new-wrappers

// eslint-disable-next-line no-prototype-builtins

// even then.

// events in browsers.

// every available SauceLabs Selenium web driver worker at time of writing.

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// execute the callback.

// fixes shallow isOver which would only be non-shallow because of

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// getDefaultExport function for compatibility with non-harmony modules

// grow, but to avoid an O(n) walk for every task we execute, we don't

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// http://fb.me/prop-types-in-prod

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://github.com/react-dnd/react-dnd/issues/1310

// if dragend handler does something like showing an alert.

// if nothing has changed then don't resubscribe

// immediately in some browsers.

// in the same tick for the source element, and browser freaks out.

// is able to screenshot the current (not yet dragging) state.

// is re-rendered, the selectors are called again, and

// is to add a scroll event listener that calls for a flush.

// it is removed from DOM and trigger endDrag manually.

// its existence.

// keys multiple times.

// lower priority turn.

// means it has ended and the drag source node disappeared from DOM,

// memoized from props

// mutation observers, so that implementation is used instead.

// necessary until the next `flush` completes.

// non-matching targets.

// original foundation for this library.

// page's first load. Thankfully, this version of Safari supports

// priority over other events including IO, animation, reflow, and redraw

// public for test

// queue if the exception handled by Node.js’s

// rawAsap provides everything we need except exception management.

// reducer returns their initial state. This effectively populates

// ref objects should be passed straight through without wrapping

// reliably everywhere they are implemented.

// return the node so it can be chained (e.g. when within callback refs

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// shift tasks off the queue after they have been executed.

// slowing down the queue of pending tasks, we rethrow the error in a

// so that we don't need to depend on findDOMNode() from react-dom.

// so the browser didn't dispatch the dragend event.

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// subsequent tasks. The higher level `asap` function ensures that if an

// the default drag preview from drawing in IE is to screenshot

// the dragging state in which the node itself has zero opacity

// the initial state tree.

// the new state tree with any relevant data from the old one.

// there. The easy solution is to only fire `hover` in `dragover` on FF.

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to enable drag and drop

// to the result

// to work around IE not supporting custom drag previews.

// undefined on initial render

// under any circumstances.

// update the collected properties after the first render

// use parent's node as drag image. Neither works in IE though.

// we don't care about invariant's own frame

// we ignore all errors here, since when the component

// we want drag drop operation to start

// we'll need to consider how to pull off dev-tooling

// webpackBootstrap

// where the user has an older version of dnd-core like in

// will abruptly end the dragging, which is not obvious.

// will receive the previous state. This effectively populates

// will still happily dispatch `dragover` despite target being no longer

// will throw again, if neither props nor store state

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// }

//# sourceMappingURL=invariant.esm.js.map

//# sourceMappingURL=shallowequal.esm.js.map
